// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bytecode.proto

#include "bytecode.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace lorelai {
namespace vm {
namespace bytecode {
constexpr debugdata::debugdata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , linenumber_(0u)
  , linecolumn_(0u){}
struct debugdataDefaultTypeInternal {
  constexpr debugdataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~debugdataDefaultTypeInternal() {}
  union {
    debugdata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT debugdataDefaultTypeInternal _debugdata_default_instance_;
constexpr instruction::instruction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : debug_(nullptr)
  , op_(0)

  , a_(0u)
  , b_(0u)
  , c_(0u){}
struct instructionDefaultTypeInternal {
  constexpr instructionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~instructionDefaultTypeInternal() {}
  union {
    instruction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT instructionDefaultTypeInternal _instruction_default_instance_;
constexpr tablevalue::tablevalue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , index_(0u){}
struct tablevalueDefaultTypeInternal {
  constexpr tablevalueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~tablevalueDefaultTypeInternal() {}
  union {
    tablevalue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT tablevalueDefaultTypeInternal _tablevalue_default_instance_;
constexpr tablekeyvalue::tablekeyvalue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(nullptr)
  , value_(nullptr){}
struct tablekeyvalueDefaultTypeInternal {
  constexpr tablekeyvalueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~tablekeyvalueDefaultTypeInternal() {}
  union {
    tablekeyvalue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT tablekeyvalueDefaultTypeInternal _tablekeyvalue_default_instance_;
constexpr table::table(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arraypart_()
  , keyvaluepart_(){}
struct tableDefaultTypeInternal {
  constexpr tableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~tableDefaultTypeInternal() {}
  union {
    table _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT tableDefaultTypeInternal _table_default_instance_;
constexpr upvaluereference::upvaluereference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protoup_(0u)
  , stackindex_(0u){}
struct upvaluereferenceDefaultTypeInternal {
  constexpr upvaluereferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~upvaluereferenceDefaultTypeInternal() {}
  union {
    upvaluereference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT upvaluereferenceDefaultTypeInternal _upvaluereference_default_instance_;
constexpr prototype::prototype(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : instructions_()
  , numbers_()
  , strings_()
  , tables_()
  , protos_()
  , upvalue_()
  , identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct prototypeDefaultTypeInternal {
  constexpr prototypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~prototypeDefaultTypeInternal() {}
  union {
    prototype _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT prototypeDefaultTypeInternal _prototype_default_instance_;
}  // namespace bytecode
}  // namespace vm
}  // namespace lorelai
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bytecode_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bytecode_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bytecode_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bytecode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::debugdata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::debugdata, linenumber_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::debugdata, linecolumn_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::debugdata, filename_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::instruction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::instruction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::instruction, op_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::instruction, a_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::instruction, b_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::instruction, c_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::instruction, debug_),
  ~0u,
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::tablevalue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::tablevalue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::tablevalue, type_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::tablevalue, index_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::tablekeyvalue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::tablekeyvalue, key_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::tablekeyvalue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::table, arraypart_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::table, keyvaluepart_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::upvaluereference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::upvaluereference, protoup_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::upvaluereference, stackindex_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::prototype, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::prototype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::prototype, instructions_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::prototype, numbers_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::prototype, strings_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::prototype, tables_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::prototype, protos_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::prototype, upvalue_),
  PROTOBUF_FIELD_OFFSET(::lorelai::vm::bytecode::prototype, identifier_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lorelai::vm::bytecode::debugdata)},
  { 8, 18, sizeof(::lorelai::vm::bytecode::instruction)},
  { 23, 30, sizeof(::lorelai::vm::bytecode::tablevalue)},
  { 32, -1, sizeof(::lorelai::vm::bytecode::tablekeyvalue)},
  { 39, -1, sizeof(::lorelai::vm::bytecode::table)},
  { 46, -1, sizeof(::lorelai::vm::bytecode::upvaluereference)},
  { 53, 65, sizeof(::lorelai::vm::bytecode::prototype)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lorelai::vm::bytecode::_debugdata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lorelai::vm::bytecode::_instruction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lorelai::vm::bytecode::_tablevalue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lorelai::vm::bytecode::_tablekeyvalue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lorelai::vm::bytecode::_table_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lorelai::vm::bytecode::_upvaluereference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lorelai::vm::bytecode::_prototype_default_instance_),
};

const char descriptor_table_protodef_bytecode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016bytecode.proto\022\023lorelai.vm.bytecode\"E\n"
  "\tdebugdata\022\022\n\nlinenumber\030\001 \001(\r\022\022\n\nlineco"
  "lumn\030\002 \001(\r\022\020\n\010filename\030\003 \001(\t\"\216\005\n\013instruc"
  "tion\0223\n\002op\030\001 \001(\0162\'.lorelai.vm.bytecode.i"
  "nstruction.opcode\022\016\n\001a\030\002 \001(\rH\000\210\001\001\022\016\n\001b\030\003"
  " \001(\rH\001\210\001\001\022\016\n\001c\030\004 \001(\rH\002\210\001\001\0222\n\005debug\030\005 \001(\013"
  "2\036.lorelai.vm.bytecode.debugdataH\003\210\001\001\"\311\003"
  "\n\006opcode\022\014\n\010CONSTANT\020\000\022\007\n\003MOV\020\001\022\007\n\003ADD\020\002"
  "\022\007\n\003NOT\020\003\022\n\n\006RETURN\020\004\022\010\n\004CALL\020\005\022\014\n\010TAILC"
  "ALL\020\006\022\014\n\010UPVALSET\020\007\022\013\n\007NEWFUNC\020\010\022\n\n\006STRI"
  "NG\020\t\022\n\n\006NUMBER\020\n\022\014\n\010FUNCTION\020\013\022\t\n\005TABLE\020"
  "\014\022\014\n\010SUBTRACT\020\r\022\n\n\006DIVIDE\020\016\022\014\n\010MULTIPLY\020"
  "\017\022\t\n\005POWER\020\020\022\n\n\006MODULO\020\021\022\n\n\006CONCAT\020\022\022\t\n\005"
  "INDEX\020\023\022\006\n\002OR\020\024\022\007\n\003AND\020\025\022\014\n\010LESSTHAN\020\026\022\021"
  "\n\rLESSTHANEQUAL\020\027\022\017\n\013GREATERTHAN\020\030\022\024\n\020GR"
  "EATERTHANEQUAL\020\031\022\n\n\006EQUALS\020\032\022\r\n\tNOTEQUAL"
  "S\020\033\022\t\n\005MINUS\020\034\022\n\n\006LENGTH\020\035\022\017\n\013ENVIRONMEN"
  "T\020\036\022\014\n\010SETINDEX\020\037\022\022\n\016ENVIRONMENTGET\020 \022\022\n"
  "\016ENVIRONMENTSET\020!B\004\n\002_aB\004\n\002_bB\004\n\002_cB\010\n\006_"
  "debug\"\252\001\n\ntablevalue\0227\n\004type\030\001 \001(\0162).lor"
  "elai.vm.bytecode.tablevalue.valuetype\022\022\n"
  "\005index\030\002 \001(\rH\000\210\001\001\"E\n\tvaluetype\022\007\n\003NIL\020\000\022"
  "\n\n\006NUMBER\020\001\022\n\n\006STRING\020\002\022\t\n\005TABLE\020\003\022\014\n\010FU"
  "NCTION\020\004B\010\n\006_index\"m\n\rtablekeyvalue\022,\n\003k"
  "ey\030\001 \001(\0132\037.lorelai.vm.bytecode.tablevalu"
  "e\022.\n\005value\030\002 \001(\0132\037.lorelai.vm.bytecode.t"
  "ablevalue\"r\n\005table\0222\n\tarraypart\030\001 \003(\0132\037."
  "lorelai.vm.bytecode.tablevalue\0225\n\014keyval"
  "uepart\030\002 \003(\0132\037.lorelai.vm.bytecode.table"
  "value\"7\n\020upvaluereference\022\017\n\007protoup\030\001 \001"
  "(\r\022\022\n\nstackindex\030\002 \001(\r\"\241\002\n\tprototype\0226\n\014"
  "instructions\030\001 \003(\0132 .lorelai.vm.bytecode"
  ".instruction\022\017\n\007numbers\030\002 \003(\001\022\017\n\007strings"
  "\030\003 \003(\t\022*\n\006tables\030\004 \003(\0132\032.lorelai.vm.byte"
  "code.table\022.\n\006protos\030\005 \003(\0132\036.lorelai.vm."
  "bytecode.prototype\0226\n\007upvalue\030\007 \003(\0132%.lo"
  "relai.vm.bytecode.upvaluereference\022\027\n\nid"
  "entifier\030\006 \001(\tH\000\210\001\001B\r\n\013_identifierb\006prot"
  "o3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bytecode_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bytecode_2eproto = {
  false, false, 1522, descriptor_table_protodef_bytecode_2eproto, "bytecode.proto", 
  &descriptor_table_bytecode_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_bytecode_2eproto::offsets,
  file_level_metadata_bytecode_2eproto, file_level_enum_descriptors_bytecode_2eproto, file_level_service_descriptors_bytecode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_bytecode_2eproto_getter() {
  return &descriptor_table_bytecode_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_bytecode_2eproto(&descriptor_table_bytecode_2eproto);
namespace lorelai {
namespace vm {
namespace bytecode {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* instruction_opcode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bytecode_2eproto);
  return file_level_enum_descriptors_bytecode_2eproto[0];
}
bool instruction_opcode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr instruction_opcode instruction::CONSTANT;
constexpr instruction_opcode instruction::MOV;
constexpr instruction_opcode instruction::ADD;
constexpr instruction_opcode instruction::NOT;
constexpr instruction_opcode instruction::RETURN;
constexpr instruction_opcode instruction::CALL;
constexpr instruction_opcode instruction::TAILCALL;
constexpr instruction_opcode instruction::UPVALSET;
constexpr instruction_opcode instruction::NEWFUNC;
constexpr instruction_opcode instruction::STRING;
constexpr instruction_opcode instruction::NUMBER;
constexpr instruction_opcode instruction::FUNCTION;
constexpr instruction_opcode instruction::TABLE;
constexpr instruction_opcode instruction::SUBTRACT;
constexpr instruction_opcode instruction::DIVIDE;
constexpr instruction_opcode instruction::MULTIPLY;
constexpr instruction_opcode instruction::POWER;
constexpr instruction_opcode instruction::MODULO;
constexpr instruction_opcode instruction::CONCAT;
constexpr instruction_opcode instruction::INDEX;
constexpr instruction_opcode instruction::OR;
constexpr instruction_opcode instruction::AND;
constexpr instruction_opcode instruction::LESSTHAN;
constexpr instruction_opcode instruction::LESSTHANEQUAL;
constexpr instruction_opcode instruction::GREATERTHAN;
constexpr instruction_opcode instruction::GREATERTHANEQUAL;
constexpr instruction_opcode instruction::EQUALS;
constexpr instruction_opcode instruction::NOTEQUALS;
constexpr instruction_opcode instruction::MINUS;
constexpr instruction_opcode instruction::LENGTH;
constexpr instruction_opcode instruction::ENVIRONMENT;
constexpr instruction_opcode instruction::SETINDEX;
constexpr instruction_opcode instruction::ENVIRONMENTGET;
constexpr instruction_opcode instruction::ENVIRONMENTSET;
constexpr instruction_opcode instruction::opcode_MIN;
constexpr instruction_opcode instruction::opcode_MAX;
constexpr int instruction::opcode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* tablevalue_valuetype_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bytecode_2eproto);
  return file_level_enum_descriptors_bytecode_2eproto[1];
}
bool tablevalue_valuetype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr tablevalue_valuetype tablevalue::NIL;
constexpr tablevalue_valuetype tablevalue::NUMBER;
constexpr tablevalue_valuetype tablevalue::STRING;
constexpr tablevalue_valuetype tablevalue::TABLE;
constexpr tablevalue_valuetype tablevalue::FUNCTION;
constexpr tablevalue_valuetype tablevalue::valuetype_MIN;
constexpr tablevalue_valuetype tablevalue::valuetype_MAX;
constexpr int tablevalue::valuetype_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class debugdata::_Internal {
 public:
};

debugdata::debugdata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lorelai.vm.bytecode.debugdata)
}
debugdata::debugdata(const debugdata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&linenumber_, &from.linenumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&linecolumn_) -
    reinterpret_cast<char*>(&linenumber_)) + sizeof(linecolumn_));
  // @@protoc_insertion_point(copy_constructor:lorelai.vm.bytecode.debugdata)
}

inline void debugdata::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&linenumber_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&linecolumn_) -
    reinterpret_cast<char*>(&linenumber_)) + sizeof(linecolumn_));
}

debugdata::~debugdata() {
  // @@protoc_insertion_point(destructor:lorelai.vm.bytecode.debugdata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void debugdata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void debugdata::ArenaDtor(void* object) {
  debugdata* _this = reinterpret_cast< debugdata* >(object);
  (void)_this;
}
void debugdata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void debugdata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void debugdata::Clear() {
// @@protoc_insertion_point(message_clear_start:lorelai.vm.bytecode.debugdata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  ::memset(&linenumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linecolumn_) -
      reinterpret_cast<char*>(&linenumber_)) + sizeof(linecolumn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* debugdata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 linenumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          linenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 linecolumn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          linecolumn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lorelai.vm.bytecode.debugdata.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* debugdata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lorelai.vm.bytecode.debugdata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 linenumber = 1;
  if (this->_internal_linenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_linenumber(), target);
  }

  // uint32 linecolumn = 2;
  if (this->_internal_linecolumn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_linecolumn(), target);
  }

  // string filename = 3;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lorelai.vm.bytecode.debugdata.filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lorelai.vm.bytecode.debugdata)
  return target;
}

size_t debugdata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lorelai.vm.bytecode.debugdata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 3;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // uint32 linenumber = 1;
  if (this->_internal_linenumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_linenumber());
  }

  // uint32 linecolumn = 2;
  if (this->_internal_linecolumn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_linecolumn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData debugdata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    debugdata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*debugdata::GetClassData() const { return &_class_data_; }

void debugdata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<debugdata *>(to)->MergeFrom(
      static_cast<const debugdata &>(from));
}


void debugdata::MergeFrom(const debugdata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lorelai.vm.bytecode.debugdata)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _internal_set_filename(from._internal_filename());
  }
  if (from._internal_linenumber() != 0) {
    _internal_set_linenumber(from._internal_linenumber());
  }
  if (from._internal_linecolumn() != 0) {
    _internal_set_linecolumn(from._internal_linecolumn());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void debugdata::CopyFrom(const debugdata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lorelai.vm.bytecode.debugdata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool debugdata::IsInitialized() const {
  return true;
}

void debugdata::InternalSwap(debugdata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, GetArenaForAllocation(),
      &other->filename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(debugdata, linecolumn_)
      + sizeof(debugdata::linecolumn_)
      - PROTOBUF_FIELD_OFFSET(debugdata, linenumber_)>(
          reinterpret_cast<char*>(&linenumber_),
          reinterpret_cast<char*>(&other->linenumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata debugdata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bytecode_2eproto_getter, &descriptor_table_bytecode_2eproto_once,
      file_level_metadata_bytecode_2eproto[0]);
}

// ===================================================================

class instruction::_Internal {
 public:
  using HasBits = decltype(std::declval<instruction>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::lorelai::vm::bytecode::debugdata& debug(const instruction* msg);
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::lorelai::vm::bytecode::debugdata&
instruction::_Internal::debug(const instruction* msg) {
  return *msg->debug_;
}
instruction::instruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lorelai.vm.bytecode.instruction)
}
instruction::instruction(const instruction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_debug()) {
    debug_ = new ::lorelai::vm::bytecode::debugdata(*from.debug_);
  } else {
    debug_ = nullptr;
  }
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&op_)) + sizeof(c_));
  // @@protoc_insertion_point(copy_constructor:lorelai.vm.bytecode.instruction)
}

inline void instruction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&debug_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&debug_)) + sizeof(c_));
}

instruction::~instruction() {
  // @@protoc_insertion_point(destructor:lorelai.vm.bytecode.instruction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void instruction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete debug_;
}

void instruction::ArenaDtor(void* object) {
  instruction* _this = reinterpret_cast< instruction* >(object);
  (void)_this;
}
void instruction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void instruction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void instruction::Clear() {
// @@protoc_insertion_point(message_clear_start:lorelai.vm.bytecode.instruction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(debug_ != nullptr);
    debug_->Clear();
  }
  op_ = 0;
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&c_) -
        reinterpret_cast<char*>(&a_)) + sizeof(c_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* instruction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .lorelai.vm.bytecode.instruction.opcode op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::lorelai::vm::bytecode::instruction_opcode>(val));
        } else goto handle_unusual;
        continue;
      // optional uint32 a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 c = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .lorelai.vm.bytecode.debugdata debug = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* instruction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lorelai.vm.bytecode.instruction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lorelai.vm.bytecode.instruction.opcode op = 1;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // optional uint32 a = 2;
  if (_internal_has_a()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_a(), target);
  }

  // optional uint32 b = 3;
  if (_internal_has_b()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_b(), target);
  }

  // optional uint32 c = 4;
  if (_internal_has_c()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_c(), target);
  }

  // optional .lorelai.vm.bytecode.debugdata debug = 5;
  if (_internal_has_debug()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::debug(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lorelai.vm.bytecode.instruction)
  return target;
}

size_t instruction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lorelai.vm.bytecode.instruction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .lorelai.vm.bytecode.debugdata debug = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *debug_);
  }

  // .lorelai.vm.bytecode.instruction.opcode op = 1;
  if (this->_internal_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (cached_has_bits & 0x0000000eu) {
    // optional uint32 a = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_a());
    }

    // optional uint32 b = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_b());
    }

    // optional uint32 c = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_c());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData instruction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    instruction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*instruction::GetClassData() const { return &_class_data_; }

void instruction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<instruction *>(to)->MergeFrom(
      static_cast<const instruction &>(from));
}


void instruction::MergeFrom(const instruction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lorelai.vm.bytecode.instruction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_debug()) {
    _internal_mutable_debug()->::lorelai::vm::bytecode::debugdata::MergeFrom(from._internal_debug());
  }
  if (from._internal_op() != 0) {
    _internal_set_op(from._internal_op());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      c_ = from.c_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void instruction::CopyFrom(const instruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lorelai.vm.bytecode.instruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool instruction::IsInitialized() const {
  return true;
}

void instruction::InternalSwap(instruction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(instruction, c_)
      + sizeof(instruction::c_)
      - PROTOBUF_FIELD_OFFSET(instruction, debug_)>(
          reinterpret_cast<char*>(&debug_),
          reinterpret_cast<char*>(&other->debug_));
}

::PROTOBUF_NAMESPACE_ID::Metadata instruction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bytecode_2eproto_getter, &descriptor_table_bytecode_2eproto_once,
      file_level_metadata_bytecode_2eproto[1]);
}

// ===================================================================

class tablevalue::_Internal {
 public:
  using HasBits = decltype(std::declval<tablevalue>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

tablevalue::tablevalue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lorelai.vm.bytecode.tablevalue)
}
tablevalue::tablevalue(const tablevalue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&type_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:lorelai.vm.bytecode.tablevalue)
}

inline void tablevalue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&type_)) + sizeof(index_));
}

tablevalue::~tablevalue() {
  // @@protoc_insertion_point(destructor:lorelai.vm.bytecode.tablevalue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void tablevalue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void tablevalue::ArenaDtor(void* object) {
  tablevalue* _this = reinterpret_cast< tablevalue* >(object);
  (void)_this;
}
void tablevalue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void tablevalue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void tablevalue::Clear() {
// @@protoc_insertion_point(message_clear_start:lorelai.vm.bytecode.tablevalue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* tablevalue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .lorelai.vm.bytecode.tablevalue.valuetype type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::lorelai::vm::bytecode::tablevalue_valuetype>(val));
        } else goto handle_unusual;
        continue;
      // optional uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tablevalue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lorelai.vm.bytecode.tablevalue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lorelai.vm.bytecode.tablevalue.valuetype type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint32 index = 2;
  if (_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lorelai.vm.bytecode.tablevalue)
  return target;
}

size_t tablevalue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lorelai.vm.bytecode.tablevalue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lorelai.vm.bytecode.tablevalue.valuetype type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // optional uint32 index = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData tablevalue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    tablevalue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*tablevalue::GetClassData() const { return &_class_data_; }

void tablevalue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<tablevalue *>(to)->MergeFrom(
      static_cast<const tablevalue &>(from));
}


void tablevalue::MergeFrom(const tablevalue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lorelai.vm.bytecode.tablevalue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_has_index()) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void tablevalue::CopyFrom(const tablevalue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lorelai.vm.bytecode.tablevalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tablevalue::IsInitialized() const {
  return true;
}

void tablevalue::InternalSwap(tablevalue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(tablevalue, index_)
      + sizeof(tablevalue::index_)
      - PROTOBUF_FIELD_OFFSET(tablevalue, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata tablevalue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bytecode_2eproto_getter, &descriptor_table_bytecode_2eproto_once,
      file_level_metadata_bytecode_2eproto[2]);
}

// ===================================================================

class tablekeyvalue::_Internal {
 public:
  static const ::lorelai::vm::bytecode::tablevalue& key(const tablekeyvalue* msg);
  static const ::lorelai::vm::bytecode::tablevalue& value(const tablekeyvalue* msg);
};

const ::lorelai::vm::bytecode::tablevalue&
tablekeyvalue::_Internal::key(const tablekeyvalue* msg) {
  return *msg->key_;
}
const ::lorelai::vm::bytecode::tablevalue&
tablekeyvalue::_Internal::value(const tablekeyvalue* msg) {
  return *msg->value_;
}
tablekeyvalue::tablekeyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lorelai.vm.bytecode.tablekeyvalue)
}
tablekeyvalue::tablekeyvalue(const tablekeyvalue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::lorelai::vm::bytecode::tablevalue(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::lorelai::vm::bytecode::tablevalue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lorelai.vm.bytecode.tablekeyvalue)
}

inline void tablekeyvalue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

tablekeyvalue::~tablekeyvalue() {
  // @@protoc_insertion_point(destructor:lorelai.vm.bytecode.tablekeyvalue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void tablekeyvalue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete value_;
}

void tablekeyvalue::ArenaDtor(void* object) {
  tablekeyvalue* _this = reinterpret_cast< tablekeyvalue* >(object);
  (void)_this;
}
void tablekeyvalue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void tablekeyvalue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void tablekeyvalue::Clear() {
// @@protoc_insertion_point(message_clear_start:lorelai.vm.bytecode.tablekeyvalue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* tablekeyvalue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .lorelai.vm.bytecode.tablevalue key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lorelai.vm.bytecode.tablevalue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tablekeyvalue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lorelai.vm.bytecode.tablekeyvalue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lorelai.vm.bytecode.tablevalue key = 1;
  if (this->_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key(this), target, stream);
  }

  // .lorelai.vm.bytecode.tablevalue value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lorelai.vm.bytecode.tablekeyvalue)
  return target;
}

size_t tablekeyvalue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lorelai.vm.bytecode.tablekeyvalue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lorelai.vm.bytecode.tablevalue key = 1;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .lorelai.vm.bytecode.tablevalue value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData tablekeyvalue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    tablekeyvalue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*tablekeyvalue::GetClassData() const { return &_class_data_; }

void tablekeyvalue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<tablekeyvalue *>(to)->MergeFrom(
      static_cast<const tablekeyvalue &>(from));
}


void tablekeyvalue::MergeFrom(const tablekeyvalue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lorelai.vm.bytecode.tablekeyvalue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _internal_mutable_key()->::lorelai::vm::bytecode::tablevalue::MergeFrom(from._internal_key());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::lorelai::vm::bytecode::tablevalue::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void tablekeyvalue::CopyFrom(const tablekeyvalue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lorelai.vm.bytecode.tablekeyvalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tablekeyvalue::IsInitialized() const {
  return true;
}

void tablekeyvalue::InternalSwap(tablekeyvalue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(tablekeyvalue, value_)
      + sizeof(tablekeyvalue::value_)
      - PROTOBUF_FIELD_OFFSET(tablekeyvalue, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata tablekeyvalue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bytecode_2eproto_getter, &descriptor_table_bytecode_2eproto_once,
      file_level_metadata_bytecode_2eproto[3]);
}

// ===================================================================

class table::_Internal {
 public:
};

table::table(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arraypart_(arena),
  keyvaluepart_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lorelai.vm.bytecode.table)
}
table::table(const table& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arraypart_(from.arraypart_),
      keyvaluepart_(from.keyvaluepart_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lorelai.vm.bytecode.table)
}

inline void table::SharedCtor() {
}

table::~table() {
  // @@protoc_insertion_point(destructor:lorelai.vm.bytecode.table)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void table::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void table::ArenaDtor(void* object) {
  table* _this = reinterpret_cast< table* >(object);
  (void)_this;
}
void table::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void table::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void table::Clear() {
// @@protoc_insertion_point(message_clear_start:lorelai.vm.bytecode.table)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arraypart_.Clear();
  keyvaluepart_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* table::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .lorelai.vm.bytecode.tablevalue arraypart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arraypart(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lorelai.vm.bytecode.tablevalue keyvaluepart = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keyvaluepart(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* table::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lorelai.vm.bytecode.table)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lorelai.vm.bytecode.tablevalue arraypart = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arraypart_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_arraypart(i), target, stream);
  }

  // repeated .lorelai.vm.bytecode.tablevalue keyvaluepart = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keyvaluepart_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_keyvaluepart(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lorelai.vm.bytecode.table)
  return target;
}

size_t table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lorelai.vm.bytecode.table)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lorelai.vm.bytecode.tablevalue arraypart = 1;
  total_size += 1UL * this->_internal_arraypart_size();
  for (const auto& msg : this->arraypart_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lorelai.vm.bytecode.tablevalue keyvaluepart = 2;
  total_size += 1UL * this->_internal_keyvaluepart_size();
  for (const auto& msg : this->keyvaluepart_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData table::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    table::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*table::GetClassData() const { return &_class_data_; }

void table::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<table *>(to)->MergeFrom(
      static_cast<const table &>(from));
}


void table::MergeFrom(const table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lorelai.vm.bytecode.table)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arraypart_.MergeFrom(from.arraypart_);
  keyvaluepart_.MergeFrom(from.keyvaluepart_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void table::CopyFrom(const table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lorelai.vm.bytecode.table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool table::IsInitialized() const {
  return true;
}

void table::InternalSwap(table* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arraypart_.InternalSwap(&other->arraypart_);
  keyvaluepart_.InternalSwap(&other->keyvaluepart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata table::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bytecode_2eproto_getter, &descriptor_table_bytecode_2eproto_once,
      file_level_metadata_bytecode_2eproto[4]);
}

// ===================================================================

class upvaluereference::_Internal {
 public:
};

upvaluereference::upvaluereference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lorelai.vm.bytecode.upvaluereference)
}
upvaluereference::upvaluereference(const upvaluereference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&protoup_, &from.protoup_,
    static_cast<size_t>(reinterpret_cast<char*>(&stackindex_) -
    reinterpret_cast<char*>(&protoup_)) + sizeof(stackindex_));
  // @@protoc_insertion_point(copy_constructor:lorelai.vm.bytecode.upvaluereference)
}

inline void upvaluereference::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&protoup_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stackindex_) -
    reinterpret_cast<char*>(&protoup_)) + sizeof(stackindex_));
}

upvaluereference::~upvaluereference() {
  // @@protoc_insertion_point(destructor:lorelai.vm.bytecode.upvaluereference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void upvaluereference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void upvaluereference::ArenaDtor(void* object) {
  upvaluereference* _this = reinterpret_cast< upvaluereference* >(object);
  (void)_this;
}
void upvaluereference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void upvaluereference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void upvaluereference::Clear() {
// @@protoc_insertion_point(message_clear_start:lorelai.vm.bytecode.upvaluereference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&protoup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stackindex_) -
      reinterpret_cast<char*>(&protoup_)) + sizeof(stackindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* upvaluereference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 protoup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          protoup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stackindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stackindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* upvaluereference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lorelai.vm.bytecode.upvaluereference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 protoup = 1;
  if (this->_internal_protoup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_protoup(), target);
  }

  // uint32 stackindex = 2;
  if (this->_internal_stackindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stackindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lorelai.vm.bytecode.upvaluereference)
  return target;
}

size_t upvaluereference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lorelai.vm.bytecode.upvaluereference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 protoup = 1;
  if (this->_internal_protoup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_protoup());
  }

  // uint32 stackindex = 2;
  if (this->_internal_stackindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stackindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData upvaluereference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    upvaluereference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*upvaluereference::GetClassData() const { return &_class_data_; }

void upvaluereference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<upvaluereference *>(to)->MergeFrom(
      static_cast<const upvaluereference &>(from));
}


void upvaluereference::MergeFrom(const upvaluereference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lorelai.vm.bytecode.upvaluereference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_protoup() != 0) {
    _internal_set_protoup(from._internal_protoup());
  }
  if (from._internal_stackindex() != 0) {
    _internal_set_stackindex(from._internal_stackindex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void upvaluereference::CopyFrom(const upvaluereference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lorelai.vm.bytecode.upvaluereference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upvaluereference::IsInitialized() const {
  return true;
}

void upvaluereference::InternalSwap(upvaluereference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(upvaluereference, stackindex_)
      + sizeof(upvaluereference::stackindex_)
      - PROTOBUF_FIELD_OFFSET(upvaluereference, protoup_)>(
          reinterpret_cast<char*>(&protoup_),
          reinterpret_cast<char*>(&other->protoup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata upvaluereference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bytecode_2eproto_getter, &descriptor_table_bytecode_2eproto_once,
      file_level_metadata_bytecode_2eproto[5]);
}

// ===================================================================

class prototype::_Internal {
 public:
  using HasBits = decltype(std::declval<prototype>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

prototype::prototype(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  instructions_(arena),
  numbers_(arena),
  strings_(arena),
  tables_(arena),
  protos_(arena),
  upvalue_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:lorelai.vm.bytecode.prototype)
}
prototype::prototype(const prototype& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      instructions_(from.instructions_),
      numbers_(from.numbers_),
      strings_(from.strings_),
      tables_(from.tables_),
      protos_(from.protos_),
      upvalue_(from.upvalue_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:lorelai.vm.bytecode.prototype)
}

inline void prototype::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

prototype::~prototype() {
  // @@protoc_insertion_point(destructor:lorelai.vm.bytecode.prototype)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void prototype::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void prototype::ArenaDtor(void* object) {
  prototype* _this = reinterpret_cast< prototype* >(object);
  (void)_this;
}
void prototype::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void prototype::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void prototype::Clear() {
// @@protoc_insertion_point(message_clear_start:lorelai.vm.bytecode.prototype)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instructions_.Clear();
  numbers_.Clear();
  strings_.Clear();
  tables_.Clear();
  protos_.Clear();
  upvalue_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    identifier_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* prototype::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .lorelai.vm.bytecode.instruction instructions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instructions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated double numbers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_numbers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_numbers(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string strings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lorelai.vm.bytecode.prototype.strings"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lorelai.vm.bytecode.table tables = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lorelai.vm.bytecode.prototype protos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_protos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string identifier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lorelai.vm.bytecode.prototype.identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lorelai.vm.bytecode.upvaluereference upvalue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_upvalue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* prototype::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lorelai.vm.bytecode.prototype)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lorelai.vm.bytecode.instruction instructions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instructions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_instructions(i), target, stream);
  }

  // repeated double numbers = 2;
  if (this->_internal_numbers_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_numbers(), target);
  }

  // repeated string strings = 3;
  for (int i = 0, n = this->_internal_strings_size(); i < n; i++) {
    const auto& s = this->_internal_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lorelai.vm.bytecode.prototype.strings");
    target = stream->WriteString(3, s, target);
  }

  // repeated .lorelai.vm.bytecode.table tables = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_tables(i), target, stream);
  }

  // repeated .lorelai.vm.bytecode.prototype protos = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_protos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_protos(i), target, stream);
  }

  // optional string identifier = 6;
  if (_internal_has_identifier()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lorelai.vm.bytecode.prototype.identifier");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_identifier(), target);
  }

  // repeated .lorelai.vm.bytecode.upvaluereference upvalue = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_upvalue_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_upvalue(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lorelai.vm.bytecode.prototype)
  return target;
}

size_t prototype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lorelai.vm.bytecode.prototype)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lorelai.vm.bytecode.instruction instructions = 1;
  total_size += 1UL * this->_internal_instructions_size();
  for (const auto& msg : this->instructions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double numbers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_numbers_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated string strings = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strings_.size());
  for (int i = 0, n = strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strings_.Get(i));
  }

  // repeated .lorelai.vm.bytecode.table tables = 4;
  total_size += 1UL * this->_internal_tables_size();
  for (const auto& msg : this->tables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lorelai.vm.bytecode.prototype protos = 5;
  total_size += 1UL * this->_internal_protos_size();
  for (const auto& msg : this->protos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lorelai.vm.bytecode.upvaluereference upvalue = 7;
  total_size += 1UL * this->_internal_upvalue_size();
  for (const auto& msg : this->upvalue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string identifier = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData prototype::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    prototype::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*prototype::GetClassData() const { return &_class_data_; }

void prototype::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<prototype *>(to)->MergeFrom(
      static_cast<const prototype &>(from));
}


void prototype::MergeFrom(const prototype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lorelai.vm.bytecode.prototype)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instructions_.MergeFrom(from.instructions_);
  numbers_.MergeFrom(from.numbers_);
  strings_.MergeFrom(from.strings_);
  tables_.MergeFrom(from.tables_);
  protos_.MergeFrom(from.protos_);
  upvalue_.MergeFrom(from.upvalue_);
  if (from._internal_has_identifier()) {
    _internal_set_identifier(from._internal_identifier());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void prototype::CopyFrom(const prototype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lorelai.vm.bytecode.prototype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool prototype::IsInitialized() const {
  return true;
}

void prototype::InternalSwap(prototype* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  instructions_.InternalSwap(&other->instructions_);
  numbers_.InternalSwap(&other->numbers_);
  strings_.InternalSwap(&other->strings_);
  tables_.InternalSwap(&other->tables_);
  protos_.InternalSwap(&other->protos_);
  upvalue_.InternalSwap(&other->upvalue_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identifier_, GetArenaForAllocation(),
      &other->identifier_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata prototype::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bytecode_2eproto_getter, &descriptor_table_bytecode_2eproto_once,
      file_level_metadata_bytecode_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bytecode
}  // namespace vm
}  // namespace lorelai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lorelai::vm::bytecode::debugdata* Arena::CreateMaybeMessage< ::lorelai::vm::bytecode::debugdata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lorelai::vm::bytecode::debugdata >(arena);
}
template<> PROTOBUF_NOINLINE ::lorelai::vm::bytecode::instruction* Arena::CreateMaybeMessage< ::lorelai::vm::bytecode::instruction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lorelai::vm::bytecode::instruction >(arena);
}
template<> PROTOBUF_NOINLINE ::lorelai::vm::bytecode::tablevalue* Arena::CreateMaybeMessage< ::lorelai::vm::bytecode::tablevalue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lorelai::vm::bytecode::tablevalue >(arena);
}
template<> PROTOBUF_NOINLINE ::lorelai::vm::bytecode::tablekeyvalue* Arena::CreateMaybeMessage< ::lorelai::vm::bytecode::tablekeyvalue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lorelai::vm::bytecode::tablekeyvalue >(arena);
}
template<> PROTOBUF_NOINLINE ::lorelai::vm::bytecode::table* Arena::CreateMaybeMessage< ::lorelai::vm::bytecode::table >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lorelai::vm::bytecode::table >(arena);
}
template<> PROTOBUF_NOINLINE ::lorelai::vm::bytecode::upvaluereference* Arena::CreateMaybeMessage< ::lorelai::vm::bytecode::upvaluereference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lorelai::vm::bytecode::upvaluereference >(arena);
}
template<> PROTOBUF_NOINLINE ::lorelai::vm::bytecode::prototype* Arena::CreateMaybeMessage< ::lorelai::vm::bytecode::prototype >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lorelai::vm::bytecode::prototype >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
