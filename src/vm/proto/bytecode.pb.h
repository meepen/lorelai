// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bytecode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bytecode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bytecode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bytecode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bytecode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bytecode_2eproto;
namespace lorelai {
namespace vm {
namespace bytecode {
class debugdata;
struct debugdataDefaultTypeInternal;
extern debugdataDefaultTypeInternal _debugdata_default_instance_;
class instruction;
struct instructionDefaultTypeInternal;
extern instructionDefaultTypeInternal _instruction_default_instance_;
class prototype;
struct prototypeDefaultTypeInternal;
extern prototypeDefaultTypeInternal _prototype_default_instance_;
class table;
struct tableDefaultTypeInternal;
extern tableDefaultTypeInternal _table_default_instance_;
class tablekeyvalue;
struct tablekeyvalueDefaultTypeInternal;
extern tablekeyvalueDefaultTypeInternal _tablekeyvalue_default_instance_;
class tablevalue;
struct tablevalueDefaultTypeInternal;
extern tablevalueDefaultTypeInternal _tablevalue_default_instance_;
class upvaluereference;
struct upvaluereferenceDefaultTypeInternal;
extern upvaluereferenceDefaultTypeInternal _upvaluereference_default_instance_;
}  // namespace bytecode
}  // namespace vm
}  // namespace lorelai
PROTOBUF_NAMESPACE_OPEN
template<> ::lorelai::vm::bytecode::debugdata* Arena::CreateMaybeMessage<::lorelai::vm::bytecode::debugdata>(Arena*);
template<> ::lorelai::vm::bytecode::instruction* Arena::CreateMaybeMessage<::lorelai::vm::bytecode::instruction>(Arena*);
template<> ::lorelai::vm::bytecode::prototype* Arena::CreateMaybeMessage<::lorelai::vm::bytecode::prototype>(Arena*);
template<> ::lorelai::vm::bytecode::table* Arena::CreateMaybeMessage<::lorelai::vm::bytecode::table>(Arena*);
template<> ::lorelai::vm::bytecode::tablekeyvalue* Arena::CreateMaybeMessage<::lorelai::vm::bytecode::tablekeyvalue>(Arena*);
template<> ::lorelai::vm::bytecode::tablevalue* Arena::CreateMaybeMessage<::lorelai::vm::bytecode::tablevalue>(Arena*);
template<> ::lorelai::vm::bytecode::upvaluereference* Arena::CreateMaybeMessage<::lorelai::vm::bytecode::upvaluereference>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lorelai {
namespace vm {
namespace bytecode {

enum instruction_opcode : int {
  instruction_opcode_CONSTANT = 0,
  instruction_opcode_MOV = 1,
  instruction_opcode_ADD = 2,
  instruction_opcode_NOT = 3,
  instruction_opcode_RETURN = 4,
  instruction_opcode_CALL = 5,
  instruction_opcode_CALLV = 6,
  instruction_opcode_UPVALSET = 7,
  instruction_opcode_NEWFUNC = 8,
  instruction_opcode_STRING = 9,
  instruction_opcode_NUMBER = 10,
  instruction_opcode_FUNCTION = 11,
  instruction_opcode_TABLE = 12,
  instruction_opcode_SUBTRACT = 13,
  instruction_opcode_DIVIDE = 14,
  instruction_opcode_MULTIPLY = 15,
  instruction_opcode_POWER = 16,
  instruction_opcode_MODULO = 17,
  instruction_opcode_CONCAT = 18,
  instruction_opcode_INDEX = 19,
  instruction_opcode_OR = 20,
  instruction_opcode_AND = 21,
  instruction_opcode_LESSTHAN = 22,
  instruction_opcode_LESSTHANEQUAL = 23,
  instruction_opcode_GREATERTHAN = 24,
  instruction_opcode_GREATERTHANEQUAL = 25,
  instruction_opcode_EQUALS = 26,
  instruction_opcode_NOTEQUALS = 27,
  instruction_opcode_MINUS = 28,
  instruction_opcode_LENGTH = 29,
  instruction_opcode_ENVIRONMENT = 30,
  instruction_opcode_SETINDEX = 31,
  instruction_opcode_ENVIRONMENTGET = 32,
  instruction_opcode_ENVIRONMENTSET = 33,
  instruction_opcode_JMP = 34,
  instruction_opcode_JMPIFTRUE = 35,
  instruction_opcode_JMPIFFALSE = 36,
  instruction_opcode_CALLM = 37,
  instruction_opcode_VARARG = 38,
  instruction_opcode_instruction_opcode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  instruction_opcode_instruction_opcode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool instruction_opcode_IsValid(int value);
constexpr instruction_opcode instruction_opcode_opcode_MIN = instruction_opcode_CONSTANT;
constexpr instruction_opcode instruction_opcode_opcode_MAX = instruction_opcode_VARARG;
constexpr int instruction_opcode_opcode_ARRAYSIZE = instruction_opcode_opcode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* instruction_opcode_descriptor();
template<typename T>
inline const std::string& instruction_opcode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, instruction_opcode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function instruction_opcode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    instruction_opcode_descriptor(), enum_t_value);
}
inline bool instruction_opcode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, instruction_opcode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<instruction_opcode>(
    instruction_opcode_descriptor(), name, value);
}
enum tablevalue_valuetype : int {
  tablevalue_valuetype_NIL = 0,
  tablevalue_valuetype_NUMBER = 1,
  tablevalue_valuetype_STRING = 2,
  tablevalue_valuetype_TABLE = 3,
  tablevalue_valuetype_FUNCTION = 4,
  tablevalue_valuetype_tablevalue_valuetype_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  tablevalue_valuetype_tablevalue_valuetype_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool tablevalue_valuetype_IsValid(int value);
constexpr tablevalue_valuetype tablevalue_valuetype_valuetype_MIN = tablevalue_valuetype_NIL;
constexpr tablevalue_valuetype tablevalue_valuetype_valuetype_MAX = tablevalue_valuetype_FUNCTION;
constexpr int tablevalue_valuetype_valuetype_ARRAYSIZE = tablevalue_valuetype_valuetype_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* tablevalue_valuetype_descriptor();
template<typename T>
inline const std::string& tablevalue_valuetype_Name(T enum_t_value) {
  static_assert(::std::is_same<T, tablevalue_valuetype>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function tablevalue_valuetype_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    tablevalue_valuetype_descriptor(), enum_t_value);
}
inline bool tablevalue_valuetype_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, tablevalue_valuetype* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<tablevalue_valuetype>(
    tablevalue_valuetype_descriptor(), name, value);
}
// ===================================================================

class debugdata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lorelai.vm.bytecode.debugdata) */ {
 public:
  inline debugdata() : debugdata(nullptr) {}
  ~debugdata() override;
  explicit constexpr debugdata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  debugdata(const debugdata& from);
  debugdata(debugdata&& from) noexcept
    : debugdata() {
    *this = ::std::move(from);
  }

  inline debugdata& operator=(const debugdata& from) {
    CopyFrom(from);
    return *this;
  }
  inline debugdata& operator=(debugdata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const debugdata& default_instance() {
    return *internal_default_instance();
  }
  static inline const debugdata* internal_default_instance() {
    return reinterpret_cast<const debugdata*>(
               &_debugdata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(debugdata& a, debugdata& b) {
    a.Swap(&b);
  }
  inline void Swap(debugdata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(debugdata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline debugdata* New() const final {
    return new debugdata();
  }

  debugdata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<debugdata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const debugdata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const debugdata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(debugdata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lorelai.vm.bytecode.debugdata";
  }
  protected:
  explicit debugdata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 3,
    kNoteFieldNumber = 4,
    kLinenumberFieldNumber = 1,
    kLinecolumnFieldNumber = 2,
  };
  // optional string filename = 3;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_MUST_USE_RESULT std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string note = 4;
  bool has_note() const;
  private:
  bool _internal_has_note() const;
  public:
  void clear_note();
  const std::string& note() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note();
  PROTOBUF_MUST_USE_RESULT std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // uint32 linenumber = 1;
  void clear_linenumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 linenumber() const;
  void set_linenumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_linenumber() const;
  void _internal_set_linenumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 linecolumn = 2;
  void clear_linecolumn();
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolumn() const;
  void set_linecolumn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_linecolumn() const;
  void _internal_set_linecolumn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lorelai.vm.bytecode.debugdata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  ::PROTOBUF_NAMESPACE_ID::uint32 linenumber_;
  ::PROTOBUF_NAMESPACE_ID::uint32 linecolumn_;
  friend struct ::TableStruct_bytecode_2eproto;
};
// -------------------------------------------------------------------

class instruction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lorelai.vm.bytecode.instruction) */ {
 public:
  inline instruction() : instruction(nullptr) {}
  ~instruction() override;
  explicit constexpr instruction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  instruction(const instruction& from);
  instruction(instruction&& from) noexcept
    : instruction() {
    *this = ::std::move(from);
  }

  inline instruction& operator=(const instruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline instruction& operator=(instruction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const instruction& default_instance() {
    return *internal_default_instance();
  }
  static inline const instruction* internal_default_instance() {
    return reinterpret_cast<const instruction*>(
               &_instruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(instruction& a, instruction& b) {
    a.Swap(&b);
  }
  inline void Swap(instruction* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(instruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline instruction* New() const final {
    return new instruction();
  }

  instruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<instruction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const instruction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const instruction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(instruction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lorelai.vm.bytecode.instruction";
  }
  protected:
  explicit instruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef instruction_opcode opcode;
  static constexpr opcode CONSTANT =
    instruction_opcode_CONSTANT;
  static constexpr opcode MOV =
    instruction_opcode_MOV;
  static constexpr opcode ADD =
    instruction_opcode_ADD;
  static constexpr opcode NOT =
    instruction_opcode_NOT;
  static constexpr opcode RETURN =
    instruction_opcode_RETURN;
  static constexpr opcode CALL =
    instruction_opcode_CALL;
  static constexpr opcode CALLV =
    instruction_opcode_CALLV;
  static constexpr opcode UPVALSET =
    instruction_opcode_UPVALSET;
  static constexpr opcode NEWFUNC =
    instruction_opcode_NEWFUNC;
  static constexpr opcode STRING =
    instruction_opcode_STRING;
  static constexpr opcode NUMBER =
    instruction_opcode_NUMBER;
  static constexpr opcode FUNCTION =
    instruction_opcode_FUNCTION;
  static constexpr opcode TABLE =
    instruction_opcode_TABLE;
  static constexpr opcode SUBTRACT =
    instruction_opcode_SUBTRACT;
  static constexpr opcode DIVIDE =
    instruction_opcode_DIVIDE;
  static constexpr opcode MULTIPLY =
    instruction_opcode_MULTIPLY;
  static constexpr opcode POWER =
    instruction_opcode_POWER;
  static constexpr opcode MODULO =
    instruction_opcode_MODULO;
  static constexpr opcode CONCAT =
    instruction_opcode_CONCAT;
  static constexpr opcode INDEX =
    instruction_opcode_INDEX;
  static constexpr opcode OR =
    instruction_opcode_OR;
  static constexpr opcode AND =
    instruction_opcode_AND;
  static constexpr opcode LESSTHAN =
    instruction_opcode_LESSTHAN;
  static constexpr opcode LESSTHANEQUAL =
    instruction_opcode_LESSTHANEQUAL;
  static constexpr opcode GREATERTHAN =
    instruction_opcode_GREATERTHAN;
  static constexpr opcode GREATERTHANEQUAL =
    instruction_opcode_GREATERTHANEQUAL;
  static constexpr opcode EQUALS =
    instruction_opcode_EQUALS;
  static constexpr opcode NOTEQUALS =
    instruction_opcode_NOTEQUALS;
  static constexpr opcode MINUS =
    instruction_opcode_MINUS;
  static constexpr opcode LENGTH =
    instruction_opcode_LENGTH;
  static constexpr opcode ENVIRONMENT =
    instruction_opcode_ENVIRONMENT;
  static constexpr opcode SETINDEX =
    instruction_opcode_SETINDEX;
  static constexpr opcode ENVIRONMENTGET =
    instruction_opcode_ENVIRONMENTGET;
  static constexpr opcode ENVIRONMENTSET =
    instruction_opcode_ENVIRONMENTSET;
  static constexpr opcode JMP =
    instruction_opcode_JMP;
  static constexpr opcode JMPIFTRUE =
    instruction_opcode_JMPIFTRUE;
  static constexpr opcode JMPIFFALSE =
    instruction_opcode_JMPIFFALSE;
  static constexpr opcode CALLM =
    instruction_opcode_CALLM;
  static constexpr opcode VARARG =
    instruction_opcode_VARARG;
  static inline bool opcode_IsValid(int value) {
    return instruction_opcode_IsValid(value);
  }
  static constexpr opcode opcode_MIN =
    instruction_opcode_opcode_MIN;
  static constexpr opcode opcode_MAX =
    instruction_opcode_opcode_MAX;
  static constexpr int opcode_ARRAYSIZE =
    instruction_opcode_opcode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  opcode_descriptor() {
    return instruction_opcode_descriptor();
  }
  template<typename T>
  static inline const std::string& opcode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, opcode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function opcode_Name.");
    return instruction_opcode_Name(enum_t_value);
  }
  static inline bool opcode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      opcode* value) {
    return instruction_opcode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDebugFieldNumber = 5,
    kOpFieldNumber = 1,
    kAFieldNumber = 2,
    kBFieldNumber = 3,
    kCFieldNumber = 4,
  };
  // optional .lorelai.vm.bytecode.debugdata debug = 5;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const ::lorelai::vm::bytecode::debugdata& debug() const;
  PROTOBUF_MUST_USE_RESULT ::lorelai::vm::bytecode::debugdata* release_debug();
  ::lorelai::vm::bytecode::debugdata* mutable_debug();
  void set_allocated_debug(::lorelai::vm::bytecode::debugdata* debug);
  private:
  const ::lorelai::vm::bytecode::debugdata& _internal_debug() const;
  ::lorelai::vm::bytecode::debugdata* _internal_mutable_debug();
  public:
  void unsafe_arena_set_allocated_debug(
      ::lorelai::vm::bytecode::debugdata* debug);
  ::lorelai::vm::bytecode::debugdata* unsafe_arena_release_debug();

  // .lorelai.vm.bytecode.instruction.opcode op = 1;
  void clear_op();
  ::lorelai::vm::bytecode::instruction_opcode op() const;
  void set_op(::lorelai::vm::bytecode::instruction_opcode value);
  private:
  ::lorelai::vm::bytecode::instruction_opcode _internal_op() const;
  void _internal_set_op(::lorelai::vm::bytecode::instruction_opcode value);
  public:

  // optional uint32 a = 2;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::uint32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 b = 3;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 c = 4;
  bool has_c() const;
  private:
  bool _internal_has_c() const;
  public:
  void clear_c();
  ::PROTOBUF_NAMESPACE_ID::uint32 c() const;
  void set_c(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_c() const;
  void _internal_set_c(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lorelai.vm.bytecode.instruction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::lorelai::vm::bytecode::debugdata* debug_;
  int op_;
  ::PROTOBUF_NAMESPACE_ID::uint32 a_;
  ::PROTOBUF_NAMESPACE_ID::uint32 b_;
  ::PROTOBUF_NAMESPACE_ID::uint32 c_;
  friend struct ::TableStruct_bytecode_2eproto;
};
// -------------------------------------------------------------------

class tablevalue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lorelai.vm.bytecode.tablevalue) */ {
 public:
  inline tablevalue() : tablevalue(nullptr) {}
  ~tablevalue() override;
  explicit constexpr tablevalue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  tablevalue(const tablevalue& from);
  tablevalue(tablevalue&& from) noexcept
    : tablevalue() {
    *this = ::std::move(from);
  }

  inline tablevalue& operator=(const tablevalue& from) {
    CopyFrom(from);
    return *this;
  }
  inline tablevalue& operator=(tablevalue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const tablevalue& default_instance() {
    return *internal_default_instance();
  }
  static inline const tablevalue* internal_default_instance() {
    return reinterpret_cast<const tablevalue*>(
               &_tablevalue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(tablevalue& a, tablevalue& b) {
    a.Swap(&b);
  }
  inline void Swap(tablevalue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tablevalue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tablevalue* New() const final {
    return new tablevalue();
  }

  tablevalue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tablevalue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const tablevalue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const tablevalue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tablevalue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lorelai.vm.bytecode.tablevalue";
  }
  protected:
  explicit tablevalue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef tablevalue_valuetype valuetype;
  static constexpr valuetype NIL =
    tablevalue_valuetype_NIL;
  static constexpr valuetype NUMBER =
    tablevalue_valuetype_NUMBER;
  static constexpr valuetype STRING =
    tablevalue_valuetype_STRING;
  static constexpr valuetype TABLE =
    tablevalue_valuetype_TABLE;
  static constexpr valuetype FUNCTION =
    tablevalue_valuetype_FUNCTION;
  static inline bool valuetype_IsValid(int value) {
    return tablevalue_valuetype_IsValid(value);
  }
  static constexpr valuetype valuetype_MIN =
    tablevalue_valuetype_valuetype_MIN;
  static constexpr valuetype valuetype_MAX =
    tablevalue_valuetype_valuetype_MAX;
  static constexpr int valuetype_ARRAYSIZE =
    tablevalue_valuetype_valuetype_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  valuetype_descriptor() {
    return tablevalue_valuetype_descriptor();
  }
  template<typename T>
  static inline const std::string& valuetype_Name(T enum_t_value) {
    static_assert(::std::is_same<T, valuetype>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function valuetype_Name.");
    return tablevalue_valuetype_Name(enum_t_value);
  }
  static inline bool valuetype_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      valuetype* value) {
    return tablevalue_valuetype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // .lorelai.vm.bytecode.tablevalue.valuetype type = 1;
  void clear_type();
  ::lorelai::vm::bytecode::tablevalue_valuetype type() const;
  void set_type(::lorelai::vm::bytecode::tablevalue_valuetype value);
  private:
  ::lorelai::vm::bytecode::tablevalue_valuetype _internal_type() const;
  void _internal_set_type(::lorelai::vm::bytecode::tablevalue_valuetype value);
  public:

  // optional uint32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lorelai.vm.bytecode.tablevalue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  friend struct ::TableStruct_bytecode_2eproto;
};
// -------------------------------------------------------------------

class tablekeyvalue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lorelai.vm.bytecode.tablekeyvalue) */ {
 public:
  inline tablekeyvalue() : tablekeyvalue(nullptr) {}
  ~tablekeyvalue() override;
  explicit constexpr tablekeyvalue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  tablekeyvalue(const tablekeyvalue& from);
  tablekeyvalue(tablekeyvalue&& from) noexcept
    : tablekeyvalue() {
    *this = ::std::move(from);
  }

  inline tablekeyvalue& operator=(const tablekeyvalue& from) {
    CopyFrom(from);
    return *this;
  }
  inline tablekeyvalue& operator=(tablekeyvalue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const tablekeyvalue& default_instance() {
    return *internal_default_instance();
  }
  static inline const tablekeyvalue* internal_default_instance() {
    return reinterpret_cast<const tablekeyvalue*>(
               &_tablekeyvalue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(tablekeyvalue& a, tablekeyvalue& b) {
    a.Swap(&b);
  }
  inline void Swap(tablekeyvalue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tablekeyvalue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tablekeyvalue* New() const final {
    return new tablekeyvalue();
  }

  tablekeyvalue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tablekeyvalue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const tablekeyvalue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const tablekeyvalue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tablekeyvalue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lorelai.vm.bytecode.tablekeyvalue";
  }
  protected:
  explicit tablekeyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .lorelai.vm.bytecode.tablevalue key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::lorelai::vm::bytecode::tablevalue& key() const;
  PROTOBUF_MUST_USE_RESULT ::lorelai::vm::bytecode::tablevalue* release_key();
  ::lorelai::vm::bytecode::tablevalue* mutable_key();
  void set_allocated_key(::lorelai::vm::bytecode::tablevalue* key);
  private:
  const ::lorelai::vm::bytecode::tablevalue& _internal_key() const;
  ::lorelai::vm::bytecode::tablevalue* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::lorelai::vm::bytecode::tablevalue* key);
  ::lorelai::vm::bytecode::tablevalue* unsafe_arena_release_key();

  // .lorelai.vm.bytecode.tablevalue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::lorelai::vm::bytecode::tablevalue& value() const;
  PROTOBUF_MUST_USE_RESULT ::lorelai::vm::bytecode::tablevalue* release_value();
  ::lorelai::vm::bytecode::tablevalue* mutable_value();
  void set_allocated_value(::lorelai::vm::bytecode::tablevalue* value);
  private:
  const ::lorelai::vm::bytecode::tablevalue& _internal_value() const;
  ::lorelai::vm::bytecode::tablevalue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::lorelai::vm::bytecode::tablevalue* value);
  ::lorelai::vm::bytecode::tablevalue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:lorelai.vm.bytecode.tablekeyvalue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::lorelai::vm::bytecode::tablevalue* key_;
  ::lorelai::vm::bytecode::tablevalue* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bytecode_2eproto;
};
// -------------------------------------------------------------------

class table final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lorelai.vm.bytecode.table) */ {
 public:
  inline table() : table(nullptr) {}
  ~table() override;
  explicit constexpr table(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  table(const table& from);
  table(table&& from) noexcept
    : table() {
    *this = ::std::move(from);
  }

  inline table& operator=(const table& from) {
    CopyFrom(from);
    return *this;
  }
  inline table& operator=(table&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const table& default_instance() {
    return *internal_default_instance();
  }
  static inline const table* internal_default_instance() {
    return reinterpret_cast<const table*>(
               &_table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(table& a, table& b) {
    a.Swap(&b);
  }
  inline void Swap(table* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(table* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline table* New() const final {
    return new table();
  }

  table* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<table>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const table& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const table& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(table* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lorelai.vm.bytecode.table";
  }
  protected:
  explicit table(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArraypartFieldNumber = 1,
    kKeyvaluepartFieldNumber = 2,
  };
  // repeated .lorelai.vm.bytecode.tablevalue arraypart = 1;
  int arraypart_size() const;
  private:
  int _internal_arraypart_size() const;
  public:
  void clear_arraypart();
  ::lorelai::vm::bytecode::tablevalue* mutable_arraypart(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::tablevalue >*
      mutable_arraypart();
  private:
  const ::lorelai::vm::bytecode::tablevalue& _internal_arraypart(int index) const;
  ::lorelai::vm::bytecode::tablevalue* _internal_add_arraypart();
  public:
  const ::lorelai::vm::bytecode::tablevalue& arraypart(int index) const;
  ::lorelai::vm::bytecode::tablevalue* add_arraypart();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::tablevalue >&
      arraypart() const;

  // repeated .lorelai.vm.bytecode.tablevalue keyvaluepart = 2;
  int keyvaluepart_size() const;
  private:
  int _internal_keyvaluepart_size() const;
  public:
  void clear_keyvaluepart();
  ::lorelai::vm::bytecode::tablevalue* mutable_keyvaluepart(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::tablevalue >*
      mutable_keyvaluepart();
  private:
  const ::lorelai::vm::bytecode::tablevalue& _internal_keyvaluepart(int index) const;
  ::lorelai::vm::bytecode::tablevalue* _internal_add_keyvaluepart();
  public:
  const ::lorelai::vm::bytecode::tablevalue& keyvaluepart(int index) const;
  ::lorelai::vm::bytecode::tablevalue* add_keyvaluepart();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::tablevalue >&
      keyvaluepart() const;

  // @@protoc_insertion_point(class_scope:lorelai.vm.bytecode.table)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::tablevalue > arraypart_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::tablevalue > keyvaluepart_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bytecode_2eproto;
};
// -------------------------------------------------------------------

class upvaluereference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lorelai.vm.bytecode.upvaluereference) */ {
 public:
  inline upvaluereference() : upvaluereference(nullptr) {}
  ~upvaluereference() override;
  explicit constexpr upvaluereference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  upvaluereference(const upvaluereference& from);
  upvaluereference(upvaluereference&& from) noexcept
    : upvaluereference() {
    *this = ::std::move(from);
  }

  inline upvaluereference& operator=(const upvaluereference& from) {
    CopyFrom(from);
    return *this;
  }
  inline upvaluereference& operator=(upvaluereference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const upvaluereference& default_instance() {
    return *internal_default_instance();
  }
  static inline const upvaluereference* internal_default_instance() {
    return reinterpret_cast<const upvaluereference*>(
               &_upvaluereference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(upvaluereference& a, upvaluereference& b) {
    a.Swap(&b);
  }
  inline void Swap(upvaluereference* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(upvaluereference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline upvaluereference* New() const final {
    return new upvaluereference();
  }

  upvaluereference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<upvaluereference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const upvaluereference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const upvaluereference& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(upvaluereference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lorelai.vm.bytecode.upvaluereference";
  }
  protected:
  explicit upvaluereference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtoupFieldNumber = 1,
    kStackindexFieldNumber = 2,
  };
  // uint32 protoup = 1;
  void clear_protoup();
  ::PROTOBUF_NAMESPACE_ID::uint32 protoup() const;
  void set_protoup(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protoup() const;
  void _internal_set_protoup(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stackindex = 2;
  void clear_stackindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 stackindex() const;
  void set_stackindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stackindex() const;
  void _internal_set_stackindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lorelai.vm.bytecode.upvaluereference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protoup_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stackindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bytecode_2eproto;
};
// -------------------------------------------------------------------

class prototype final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lorelai.vm.bytecode.prototype) */ {
 public:
  inline prototype() : prototype(nullptr) {}
  ~prototype() override;
  explicit constexpr prototype(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  prototype(const prototype& from);
  prototype(prototype&& from) noexcept
    : prototype() {
    *this = ::std::move(from);
  }

  inline prototype& operator=(const prototype& from) {
    CopyFrom(from);
    return *this;
  }
  inline prototype& operator=(prototype&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const prototype& default_instance() {
    return *internal_default_instance();
  }
  static inline const prototype* internal_default_instance() {
    return reinterpret_cast<const prototype*>(
               &_prototype_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(prototype& a, prototype& b) {
    a.Swap(&b);
  }
  inline void Swap(prototype* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(prototype* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline prototype* New() const final {
    return new prototype();
  }

  prototype* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<prototype>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const prototype& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const prototype& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(prototype* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lorelai.vm.bytecode.prototype";
  }
  protected:
  explicit prototype(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstructionsFieldNumber = 1,
    kNumbersFieldNumber = 2,
    kStringsFieldNumber = 3,
    kTablesFieldNumber = 4,
    kProtosFieldNumber = 5,
    kUpvalueFieldNumber = 7,
    kIdentifierFieldNumber = 6,
  };
  // repeated .lorelai.vm.bytecode.instruction instructions = 1;
  int instructions_size() const;
  private:
  int _internal_instructions_size() const;
  public:
  void clear_instructions();
  ::lorelai::vm::bytecode::instruction* mutable_instructions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::instruction >*
      mutable_instructions();
  private:
  const ::lorelai::vm::bytecode::instruction& _internal_instructions(int index) const;
  ::lorelai::vm::bytecode::instruction* _internal_add_instructions();
  public:
  const ::lorelai::vm::bytecode::instruction& instructions(int index) const;
  ::lorelai::vm::bytecode::instruction* add_instructions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::instruction >&
      instructions() const;

  // repeated double numbers = 2;
  int numbers_size() const;
  private:
  int _internal_numbers_size() const;
  public:
  void clear_numbers();
  private:
  double _internal_numbers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_numbers() const;
  void _internal_add_numbers(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_numbers();
  public:
  double numbers(int index) const;
  void set_numbers(int index, double value);
  void add_numbers(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_numbers();

  // repeated string strings = 3;
  int strings_size() const;
  private:
  int _internal_strings_size() const;
  public:
  void clear_strings();
  const std::string& strings(int index) const;
  std::string* mutable_strings(int index);
  void set_strings(int index, const std::string& value);
  void set_strings(int index, std::string&& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const char* value, size_t size);
  std::string* add_strings();
  void add_strings(const std::string& value);
  void add_strings(std::string&& value);
  void add_strings(const char* value);
  void add_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_strings();
  private:
  const std::string& _internal_strings(int index) const;
  std::string* _internal_add_strings();
  public:

  // repeated .lorelai.vm.bytecode.table tables = 4;
  int tables_size() const;
  private:
  int _internal_tables_size() const;
  public:
  void clear_tables();
  ::lorelai::vm::bytecode::table* mutable_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::table >*
      mutable_tables();
  private:
  const ::lorelai::vm::bytecode::table& _internal_tables(int index) const;
  ::lorelai::vm::bytecode::table* _internal_add_tables();
  public:
  const ::lorelai::vm::bytecode::table& tables(int index) const;
  ::lorelai::vm::bytecode::table* add_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::table >&
      tables() const;

  // repeated .lorelai.vm.bytecode.prototype protos = 5;
  int protos_size() const;
  private:
  int _internal_protos_size() const;
  public:
  void clear_protos();
  ::lorelai::vm::bytecode::prototype* mutable_protos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::prototype >*
      mutable_protos();
  private:
  const ::lorelai::vm::bytecode::prototype& _internal_protos(int index) const;
  ::lorelai::vm::bytecode::prototype* _internal_add_protos();
  public:
  const ::lorelai::vm::bytecode::prototype& protos(int index) const;
  ::lorelai::vm::bytecode::prototype* add_protos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::prototype >&
      protos() const;

  // repeated .lorelai.vm.bytecode.upvaluereference upvalue = 7;
  int upvalue_size() const;
  private:
  int _internal_upvalue_size() const;
  public:
  void clear_upvalue();
  ::lorelai::vm::bytecode::upvaluereference* mutable_upvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::upvaluereference >*
      mutable_upvalue();
  private:
  const ::lorelai::vm::bytecode::upvaluereference& _internal_upvalue(int index) const;
  ::lorelai::vm::bytecode::upvaluereference* _internal_add_upvalue();
  public:
  const ::lorelai::vm::bytecode::upvaluereference& upvalue(int index) const;
  ::lorelai::vm::bytecode::upvaluereference* add_upvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::upvaluereference >&
      upvalue() const;

  // optional string identifier = 6;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_MUST_USE_RESULT std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // @@protoc_insertion_point(class_scope:lorelai.vm.bytecode.prototype)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::instruction > instructions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > numbers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> strings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::table > tables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::prototype > protos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::upvaluereference > upvalue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  friend struct ::TableStruct_bytecode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// debugdata

// uint32 linenumber = 1;
inline void debugdata::clear_linenumber() {
  linenumber_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 debugdata::_internal_linenumber() const {
  return linenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 debugdata::linenumber() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.debugdata.linenumber)
  return _internal_linenumber();
}
inline void debugdata::_internal_set_linenumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  linenumber_ = value;
}
inline void debugdata::set_linenumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_linenumber(value);
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.debugdata.linenumber)
}

// uint32 linecolumn = 2;
inline void debugdata::clear_linecolumn() {
  linecolumn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 debugdata::_internal_linecolumn() const {
  return linecolumn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 debugdata::linecolumn() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.debugdata.linecolumn)
  return _internal_linecolumn();
}
inline void debugdata::_internal_set_linecolumn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  linecolumn_ = value;
}
inline void debugdata::set_linecolumn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_linecolumn(value);
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.debugdata.linecolumn)
}

// optional string filename = 3;
inline bool debugdata::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool debugdata::has_filename() const {
  return _internal_has_filename();
}
inline void debugdata::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& debugdata::filename() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.debugdata.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void debugdata::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.debugdata.filename)
}
inline std::string* debugdata::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:lorelai.vm.bytecode.debugdata.filename)
  return _s;
}
inline const std::string& debugdata::_internal_filename() const {
  return filename_.Get();
}
inline void debugdata::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* debugdata::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* debugdata::release_filename() {
  // @@protoc_insertion_point(field_release:lorelai.vm.bytecode.debugdata.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void debugdata::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:lorelai.vm.bytecode.debugdata.filename)
}

// optional string note = 4;
inline bool debugdata::_internal_has_note() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool debugdata::has_note() const {
  return _internal_has_note();
}
inline void debugdata::clear_note() {
  note_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& debugdata::note() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.debugdata.note)
  return _internal_note();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void debugdata::set_note(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.debugdata.note)
}
inline std::string* debugdata::mutable_note() {
  std::string* _s = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:lorelai.vm.bytecode.debugdata.note)
  return _s;
}
inline const std::string& debugdata::_internal_note() const {
  return note_.Get();
}
inline void debugdata::_internal_set_note(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* debugdata::_internal_mutable_note() {
  _has_bits_[0] |= 0x00000002u;
  return note_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* debugdata::release_note() {
  // @@protoc_insertion_point(field_release:lorelai.vm.bytecode.debugdata.note)
  if (!_internal_has_note()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return note_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void debugdata::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  note_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:lorelai.vm.bytecode.debugdata.note)
}

// -------------------------------------------------------------------

// instruction

// .lorelai.vm.bytecode.instruction.opcode op = 1;
inline void instruction::clear_op() {
  op_ = 0;
}
inline ::lorelai::vm::bytecode::instruction_opcode instruction::_internal_op() const {
  return static_cast< ::lorelai::vm::bytecode::instruction_opcode >(op_);
}
inline ::lorelai::vm::bytecode::instruction_opcode instruction::op() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.instruction.op)
  return _internal_op();
}
inline void instruction::_internal_set_op(::lorelai::vm::bytecode::instruction_opcode value) {
  
  op_ = value;
}
inline void instruction::set_op(::lorelai::vm::bytecode::instruction_opcode value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.instruction.op)
}

// optional uint32 a = 2;
inline bool instruction::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool instruction::has_a() const {
  return _internal_has_a();
}
inline void instruction::clear_a() {
  a_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 instruction::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 instruction::a() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.instruction.a)
  return _internal_a();
}
inline void instruction::_internal_set_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  a_ = value;
}
inline void instruction::set_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.instruction.a)
}

// optional uint32 b = 3;
inline bool instruction::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool instruction::has_b() const {
  return _internal_has_b();
}
inline void instruction::clear_b() {
  b_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 instruction::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 instruction::b() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.instruction.b)
  return _internal_b();
}
inline void instruction::_internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  b_ = value;
}
inline void instruction::set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.instruction.b)
}

// optional uint32 c = 4;
inline bool instruction::_internal_has_c() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool instruction::has_c() const {
  return _internal_has_c();
}
inline void instruction::clear_c() {
  c_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 instruction::_internal_c() const {
  return c_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 instruction::c() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.instruction.c)
  return _internal_c();
}
inline void instruction::_internal_set_c(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  c_ = value;
}
inline void instruction::set_c(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.instruction.c)
}

// optional .lorelai.vm.bytecode.debugdata debug = 5;
inline bool instruction::_internal_has_debug() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || debug_ != nullptr);
  return value;
}
inline bool instruction::has_debug() const {
  return _internal_has_debug();
}
inline void instruction::clear_debug() {
  if (debug_ != nullptr) debug_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::lorelai::vm::bytecode::debugdata& instruction::_internal_debug() const {
  const ::lorelai::vm::bytecode::debugdata* p = debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::lorelai::vm::bytecode::debugdata&>(
      ::lorelai::vm::bytecode::_debugdata_default_instance_);
}
inline const ::lorelai::vm::bytecode::debugdata& instruction::debug() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.instruction.debug)
  return _internal_debug();
}
inline void instruction::unsafe_arena_set_allocated_debug(
    ::lorelai::vm::bytecode::debugdata* debug) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_);
  }
  debug_ = debug;
  if (debug) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lorelai.vm.bytecode.instruction.debug)
}
inline ::lorelai::vm::bytecode::debugdata* instruction::release_debug() {
  _has_bits_[0] &= ~0x00000001u;
  ::lorelai::vm::bytecode::debugdata* temp = debug_;
  debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lorelai::vm::bytecode::debugdata* instruction::unsafe_arena_release_debug() {
  // @@protoc_insertion_point(field_release:lorelai.vm.bytecode.instruction.debug)
  _has_bits_[0] &= ~0x00000001u;
  ::lorelai::vm::bytecode::debugdata* temp = debug_;
  debug_ = nullptr;
  return temp;
}
inline ::lorelai::vm::bytecode::debugdata* instruction::_internal_mutable_debug() {
  _has_bits_[0] |= 0x00000001u;
  if (debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::lorelai::vm::bytecode::debugdata>(GetArenaForAllocation());
    debug_ = p;
  }
  return debug_;
}
inline ::lorelai::vm::bytecode::debugdata* instruction::mutable_debug() {
  ::lorelai::vm::bytecode::debugdata* _msg = _internal_mutable_debug();
  // @@protoc_insertion_point(field_mutable:lorelai.vm.bytecode.instruction.debug)
  return _msg;
}
inline void instruction::set_allocated_debug(::lorelai::vm::bytecode::debugdata* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete debug_;
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::lorelai::vm::bytecode::debugdata>::GetOwningArena(debug);
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:lorelai.vm.bytecode.instruction.debug)
}

// -------------------------------------------------------------------

// tablevalue

// .lorelai.vm.bytecode.tablevalue.valuetype type = 1;
inline void tablevalue::clear_type() {
  type_ = 0;
}
inline ::lorelai::vm::bytecode::tablevalue_valuetype tablevalue::_internal_type() const {
  return static_cast< ::lorelai::vm::bytecode::tablevalue_valuetype >(type_);
}
inline ::lorelai::vm::bytecode::tablevalue_valuetype tablevalue::type() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.tablevalue.type)
  return _internal_type();
}
inline void tablevalue::_internal_set_type(::lorelai::vm::bytecode::tablevalue_valuetype value) {
  
  type_ = value;
}
inline void tablevalue::set_type(::lorelai::vm::bytecode::tablevalue_valuetype value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.tablevalue.type)
}

// optional uint32 index = 2;
inline bool tablevalue::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool tablevalue::has_index() const {
  return _internal_has_index();
}
inline void tablevalue::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 tablevalue::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 tablevalue::index() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.tablevalue.index)
  return _internal_index();
}
inline void tablevalue::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  index_ = value;
}
inline void tablevalue::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.tablevalue.index)
}

// -------------------------------------------------------------------

// tablekeyvalue

// .lorelai.vm.bytecode.tablevalue key = 1;
inline bool tablekeyvalue::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool tablekeyvalue::has_key() const {
  return _internal_has_key();
}
inline void tablekeyvalue::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::lorelai::vm::bytecode::tablevalue& tablekeyvalue::_internal_key() const {
  const ::lorelai::vm::bytecode::tablevalue* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::lorelai::vm::bytecode::tablevalue&>(
      ::lorelai::vm::bytecode::_tablevalue_default_instance_);
}
inline const ::lorelai::vm::bytecode::tablevalue& tablekeyvalue::key() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.tablekeyvalue.key)
  return _internal_key();
}
inline void tablekeyvalue::unsafe_arena_set_allocated_key(
    ::lorelai::vm::bytecode::tablevalue* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lorelai.vm.bytecode.tablekeyvalue.key)
}
inline ::lorelai::vm::bytecode::tablevalue* tablekeyvalue::release_key() {
  
  ::lorelai::vm::bytecode::tablevalue* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lorelai::vm::bytecode::tablevalue* tablekeyvalue::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:lorelai.vm.bytecode.tablekeyvalue.key)
  
  ::lorelai::vm::bytecode::tablevalue* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::lorelai::vm::bytecode::tablevalue* tablekeyvalue::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::lorelai::vm::bytecode::tablevalue>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::lorelai::vm::bytecode::tablevalue* tablekeyvalue::mutable_key() {
  ::lorelai::vm::bytecode::tablevalue* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:lorelai.vm.bytecode.tablekeyvalue.key)
  return _msg;
}
inline void tablekeyvalue::set_allocated_key(::lorelai::vm::bytecode::tablevalue* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::lorelai::vm::bytecode::tablevalue>::GetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:lorelai.vm.bytecode.tablekeyvalue.key)
}

// .lorelai.vm.bytecode.tablevalue value = 2;
inline bool tablekeyvalue::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool tablekeyvalue::has_value() const {
  return _internal_has_value();
}
inline void tablekeyvalue::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::lorelai::vm::bytecode::tablevalue& tablekeyvalue::_internal_value() const {
  const ::lorelai::vm::bytecode::tablevalue* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::lorelai::vm::bytecode::tablevalue&>(
      ::lorelai::vm::bytecode::_tablevalue_default_instance_);
}
inline const ::lorelai::vm::bytecode::tablevalue& tablekeyvalue::value() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.tablekeyvalue.value)
  return _internal_value();
}
inline void tablekeyvalue::unsafe_arena_set_allocated_value(
    ::lorelai::vm::bytecode::tablevalue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lorelai.vm.bytecode.tablekeyvalue.value)
}
inline ::lorelai::vm::bytecode::tablevalue* tablekeyvalue::release_value() {
  
  ::lorelai::vm::bytecode::tablevalue* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lorelai::vm::bytecode::tablevalue* tablekeyvalue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:lorelai.vm.bytecode.tablekeyvalue.value)
  
  ::lorelai::vm::bytecode::tablevalue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::lorelai::vm::bytecode::tablevalue* tablekeyvalue::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::lorelai::vm::bytecode::tablevalue>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::lorelai::vm::bytecode::tablevalue* tablekeyvalue::mutable_value() {
  ::lorelai::vm::bytecode::tablevalue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:lorelai.vm.bytecode.tablekeyvalue.value)
  return _msg;
}
inline void tablekeyvalue::set_allocated_value(::lorelai::vm::bytecode::tablevalue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::lorelai::vm::bytecode::tablevalue>::GetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:lorelai.vm.bytecode.tablekeyvalue.value)
}

// -------------------------------------------------------------------

// table

// repeated .lorelai.vm.bytecode.tablevalue arraypart = 1;
inline int table::_internal_arraypart_size() const {
  return arraypart_.size();
}
inline int table::arraypart_size() const {
  return _internal_arraypart_size();
}
inline void table::clear_arraypart() {
  arraypart_.Clear();
}
inline ::lorelai::vm::bytecode::tablevalue* table::mutable_arraypart(int index) {
  // @@protoc_insertion_point(field_mutable:lorelai.vm.bytecode.table.arraypart)
  return arraypart_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::tablevalue >*
table::mutable_arraypart() {
  // @@protoc_insertion_point(field_mutable_list:lorelai.vm.bytecode.table.arraypart)
  return &arraypart_;
}
inline const ::lorelai::vm::bytecode::tablevalue& table::_internal_arraypart(int index) const {
  return arraypart_.Get(index);
}
inline const ::lorelai::vm::bytecode::tablevalue& table::arraypart(int index) const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.table.arraypart)
  return _internal_arraypart(index);
}
inline ::lorelai::vm::bytecode::tablevalue* table::_internal_add_arraypart() {
  return arraypart_.Add();
}
inline ::lorelai::vm::bytecode::tablevalue* table::add_arraypart() {
  ::lorelai::vm::bytecode::tablevalue* _add = _internal_add_arraypart();
  // @@protoc_insertion_point(field_add:lorelai.vm.bytecode.table.arraypart)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::tablevalue >&
table::arraypart() const {
  // @@protoc_insertion_point(field_list:lorelai.vm.bytecode.table.arraypart)
  return arraypart_;
}

// repeated .lorelai.vm.bytecode.tablevalue keyvaluepart = 2;
inline int table::_internal_keyvaluepart_size() const {
  return keyvaluepart_.size();
}
inline int table::keyvaluepart_size() const {
  return _internal_keyvaluepart_size();
}
inline void table::clear_keyvaluepart() {
  keyvaluepart_.Clear();
}
inline ::lorelai::vm::bytecode::tablevalue* table::mutable_keyvaluepart(int index) {
  // @@protoc_insertion_point(field_mutable:lorelai.vm.bytecode.table.keyvaluepart)
  return keyvaluepart_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::tablevalue >*
table::mutable_keyvaluepart() {
  // @@protoc_insertion_point(field_mutable_list:lorelai.vm.bytecode.table.keyvaluepart)
  return &keyvaluepart_;
}
inline const ::lorelai::vm::bytecode::tablevalue& table::_internal_keyvaluepart(int index) const {
  return keyvaluepart_.Get(index);
}
inline const ::lorelai::vm::bytecode::tablevalue& table::keyvaluepart(int index) const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.table.keyvaluepart)
  return _internal_keyvaluepart(index);
}
inline ::lorelai::vm::bytecode::tablevalue* table::_internal_add_keyvaluepart() {
  return keyvaluepart_.Add();
}
inline ::lorelai::vm::bytecode::tablevalue* table::add_keyvaluepart() {
  ::lorelai::vm::bytecode::tablevalue* _add = _internal_add_keyvaluepart();
  // @@protoc_insertion_point(field_add:lorelai.vm.bytecode.table.keyvaluepart)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::tablevalue >&
table::keyvaluepart() const {
  // @@protoc_insertion_point(field_list:lorelai.vm.bytecode.table.keyvaluepart)
  return keyvaluepart_;
}

// -------------------------------------------------------------------

// upvaluereference

// uint32 protoup = 1;
inline void upvaluereference::clear_protoup() {
  protoup_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 upvaluereference::_internal_protoup() const {
  return protoup_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 upvaluereference::protoup() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.upvaluereference.protoup)
  return _internal_protoup();
}
inline void upvaluereference::_internal_set_protoup(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  protoup_ = value;
}
inline void upvaluereference::set_protoup(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protoup(value);
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.upvaluereference.protoup)
}

// uint32 stackindex = 2;
inline void upvaluereference::clear_stackindex() {
  stackindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 upvaluereference::_internal_stackindex() const {
  return stackindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 upvaluereference::stackindex() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.upvaluereference.stackindex)
  return _internal_stackindex();
}
inline void upvaluereference::_internal_set_stackindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stackindex_ = value;
}
inline void upvaluereference::set_stackindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stackindex(value);
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.upvaluereference.stackindex)
}

// -------------------------------------------------------------------

// prototype

// repeated .lorelai.vm.bytecode.instruction instructions = 1;
inline int prototype::_internal_instructions_size() const {
  return instructions_.size();
}
inline int prototype::instructions_size() const {
  return _internal_instructions_size();
}
inline void prototype::clear_instructions() {
  instructions_.Clear();
}
inline ::lorelai::vm::bytecode::instruction* prototype::mutable_instructions(int index) {
  // @@protoc_insertion_point(field_mutable:lorelai.vm.bytecode.prototype.instructions)
  return instructions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::instruction >*
prototype::mutable_instructions() {
  // @@protoc_insertion_point(field_mutable_list:lorelai.vm.bytecode.prototype.instructions)
  return &instructions_;
}
inline const ::lorelai::vm::bytecode::instruction& prototype::_internal_instructions(int index) const {
  return instructions_.Get(index);
}
inline const ::lorelai::vm::bytecode::instruction& prototype::instructions(int index) const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.prototype.instructions)
  return _internal_instructions(index);
}
inline ::lorelai::vm::bytecode::instruction* prototype::_internal_add_instructions() {
  return instructions_.Add();
}
inline ::lorelai::vm::bytecode::instruction* prototype::add_instructions() {
  ::lorelai::vm::bytecode::instruction* _add = _internal_add_instructions();
  // @@protoc_insertion_point(field_add:lorelai.vm.bytecode.prototype.instructions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::instruction >&
prototype::instructions() const {
  // @@protoc_insertion_point(field_list:lorelai.vm.bytecode.prototype.instructions)
  return instructions_;
}

// repeated double numbers = 2;
inline int prototype::_internal_numbers_size() const {
  return numbers_.size();
}
inline int prototype::numbers_size() const {
  return _internal_numbers_size();
}
inline void prototype::clear_numbers() {
  numbers_.Clear();
}
inline double prototype::_internal_numbers(int index) const {
  return numbers_.Get(index);
}
inline double prototype::numbers(int index) const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.prototype.numbers)
  return _internal_numbers(index);
}
inline void prototype::set_numbers(int index, double value) {
  numbers_.Set(index, value);
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.prototype.numbers)
}
inline void prototype::_internal_add_numbers(double value) {
  numbers_.Add(value);
}
inline void prototype::add_numbers(double value) {
  _internal_add_numbers(value);
  // @@protoc_insertion_point(field_add:lorelai.vm.bytecode.prototype.numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
prototype::_internal_numbers() const {
  return numbers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
prototype::numbers() const {
  // @@protoc_insertion_point(field_list:lorelai.vm.bytecode.prototype.numbers)
  return _internal_numbers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
prototype::_internal_mutable_numbers() {
  return &numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
prototype::mutable_numbers() {
  // @@protoc_insertion_point(field_mutable_list:lorelai.vm.bytecode.prototype.numbers)
  return _internal_mutable_numbers();
}

// repeated string strings = 3;
inline int prototype::_internal_strings_size() const {
  return strings_.size();
}
inline int prototype::strings_size() const {
  return _internal_strings_size();
}
inline void prototype::clear_strings() {
  strings_.Clear();
}
inline std::string* prototype::add_strings() {
  std::string* _s = _internal_add_strings();
  // @@protoc_insertion_point(field_add_mutable:lorelai.vm.bytecode.prototype.strings)
  return _s;
}
inline const std::string& prototype::_internal_strings(int index) const {
  return strings_.Get(index);
}
inline const std::string& prototype::strings(int index) const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.prototype.strings)
  return _internal_strings(index);
}
inline std::string* prototype::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:lorelai.vm.bytecode.prototype.strings)
  return strings_.Mutable(index);
}
inline void prototype::set_strings(int index, const std::string& value) {
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.prototype.strings)
}
inline void prototype::set_strings(int index, std::string&& value) {
  strings_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.prototype.strings)
}
inline void prototype::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lorelai.vm.bytecode.prototype.strings)
}
inline void prototype::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lorelai.vm.bytecode.prototype.strings)
}
inline std::string* prototype::_internal_add_strings() {
  return strings_.Add();
}
inline void prototype::add_strings(const std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lorelai.vm.bytecode.prototype.strings)
}
inline void prototype::add_strings(std::string&& value) {
  strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lorelai.vm.bytecode.prototype.strings)
}
inline void prototype::add_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lorelai.vm.bytecode.prototype.strings)
}
inline void prototype::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lorelai.vm.bytecode.prototype.strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
prototype::strings() const {
  // @@protoc_insertion_point(field_list:lorelai.vm.bytecode.prototype.strings)
  return strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
prototype::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:lorelai.vm.bytecode.prototype.strings)
  return &strings_;
}

// repeated .lorelai.vm.bytecode.table tables = 4;
inline int prototype::_internal_tables_size() const {
  return tables_.size();
}
inline int prototype::tables_size() const {
  return _internal_tables_size();
}
inline void prototype::clear_tables() {
  tables_.Clear();
}
inline ::lorelai::vm::bytecode::table* prototype::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:lorelai.vm.bytecode.prototype.tables)
  return tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::table >*
prototype::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:lorelai.vm.bytecode.prototype.tables)
  return &tables_;
}
inline const ::lorelai::vm::bytecode::table& prototype::_internal_tables(int index) const {
  return tables_.Get(index);
}
inline const ::lorelai::vm::bytecode::table& prototype::tables(int index) const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.prototype.tables)
  return _internal_tables(index);
}
inline ::lorelai::vm::bytecode::table* prototype::_internal_add_tables() {
  return tables_.Add();
}
inline ::lorelai::vm::bytecode::table* prototype::add_tables() {
  ::lorelai::vm::bytecode::table* _add = _internal_add_tables();
  // @@protoc_insertion_point(field_add:lorelai.vm.bytecode.prototype.tables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::table >&
prototype::tables() const {
  // @@protoc_insertion_point(field_list:lorelai.vm.bytecode.prototype.tables)
  return tables_;
}

// repeated .lorelai.vm.bytecode.prototype protos = 5;
inline int prototype::_internal_protos_size() const {
  return protos_.size();
}
inline int prototype::protos_size() const {
  return _internal_protos_size();
}
inline void prototype::clear_protos() {
  protos_.Clear();
}
inline ::lorelai::vm::bytecode::prototype* prototype::mutable_protos(int index) {
  // @@protoc_insertion_point(field_mutable:lorelai.vm.bytecode.prototype.protos)
  return protos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::prototype >*
prototype::mutable_protos() {
  // @@protoc_insertion_point(field_mutable_list:lorelai.vm.bytecode.prototype.protos)
  return &protos_;
}
inline const ::lorelai::vm::bytecode::prototype& prototype::_internal_protos(int index) const {
  return protos_.Get(index);
}
inline const ::lorelai::vm::bytecode::prototype& prototype::protos(int index) const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.prototype.protos)
  return _internal_protos(index);
}
inline ::lorelai::vm::bytecode::prototype* prototype::_internal_add_protos() {
  return protos_.Add();
}
inline ::lorelai::vm::bytecode::prototype* prototype::add_protos() {
  ::lorelai::vm::bytecode::prototype* _add = _internal_add_protos();
  // @@protoc_insertion_point(field_add:lorelai.vm.bytecode.prototype.protos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::prototype >&
prototype::protos() const {
  // @@protoc_insertion_point(field_list:lorelai.vm.bytecode.prototype.protos)
  return protos_;
}

// repeated .lorelai.vm.bytecode.upvaluereference upvalue = 7;
inline int prototype::_internal_upvalue_size() const {
  return upvalue_.size();
}
inline int prototype::upvalue_size() const {
  return _internal_upvalue_size();
}
inline void prototype::clear_upvalue() {
  upvalue_.Clear();
}
inline ::lorelai::vm::bytecode::upvaluereference* prototype::mutable_upvalue(int index) {
  // @@protoc_insertion_point(field_mutable:lorelai.vm.bytecode.prototype.upvalue)
  return upvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::upvaluereference >*
prototype::mutable_upvalue() {
  // @@protoc_insertion_point(field_mutable_list:lorelai.vm.bytecode.prototype.upvalue)
  return &upvalue_;
}
inline const ::lorelai::vm::bytecode::upvaluereference& prototype::_internal_upvalue(int index) const {
  return upvalue_.Get(index);
}
inline const ::lorelai::vm::bytecode::upvaluereference& prototype::upvalue(int index) const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.prototype.upvalue)
  return _internal_upvalue(index);
}
inline ::lorelai::vm::bytecode::upvaluereference* prototype::_internal_add_upvalue() {
  return upvalue_.Add();
}
inline ::lorelai::vm::bytecode::upvaluereference* prototype::add_upvalue() {
  ::lorelai::vm::bytecode::upvaluereference* _add = _internal_add_upvalue();
  // @@protoc_insertion_point(field_add:lorelai.vm.bytecode.prototype.upvalue)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lorelai::vm::bytecode::upvaluereference >&
prototype::upvalue() const {
  // @@protoc_insertion_point(field_list:lorelai.vm.bytecode.prototype.upvalue)
  return upvalue_;
}

// optional string identifier = 6;
inline bool prototype::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool prototype::has_identifier() const {
  return _internal_has_identifier();
}
inline void prototype::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& prototype::identifier() const {
  // @@protoc_insertion_point(field_get:lorelai.vm.bytecode.prototype.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void prototype::set_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lorelai.vm.bytecode.prototype.identifier)
}
inline std::string* prototype::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:lorelai.vm.bytecode.prototype.identifier)
  return _s;
}
inline const std::string& prototype::_internal_identifier() const {
  return identifier_.Get();
}
inline void prototype::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* prototype::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* prototype::release_identifier() {
  // @@protoc_insertion_point(field_release:lorelai.vm.bytecode.prototype.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void prototype::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:lorelai.vm.bytecode.prototype.identifier)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bytecode
}  // namespace vm
}  // namespace lorelai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lorelai::vm::bytecode::instruction_opcode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lorelai::vm::bytecode::instruction_opcode>() {
  return ::lorelai::vm::bytecode::instruction_opcode_descriptor();
}
template <> struct is_proto_enum< ::lorelai::vm::bytecode::tablevalue_valuetype> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lorelai::vm::bytecode::tablevalue_valuetype>() {
  return ::lorelai::vm::bytecode::tablevalue_valuetype_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bytecode_2eproto
