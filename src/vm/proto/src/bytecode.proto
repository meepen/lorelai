syntax = "proto3";

package lorelai.vm.bytecode;

message debugdata {
	uint32 linenumber = 1;
	uint32 linecolumn = 2;
	optional string filename = 3;
	optional string note = 4;
}

message instruction {
	enum opcode {

		CONSTANT = 0;  // A = ({true, false, nil})[B]

		MOV      = 1;  // A .. A+C = B .. B+C

		ADD      = 2;  // A = B + C

		NOT      = 3;  // A = not B
		RETURN   = 4;  // return A .. A+B-1, C == 1 and ... or C == 2 and returns... or none
		CALL     = 5;  // A .. A+C-2 = A(A+1 .. A + B)
		CALLV    = 6;  // A .. A+C-2 = A(A+1 .. A + B, ...)
		UPVALSET = 7;  // UP(A)[B] = C
		NEWFUNC  = 8;  // A = NEWFUNC(prototypes[B], C...)
		
		STRING   = 9;  // A = string(B)
		NUMBER   = 10; // A = number(B)
		FUNCTION = 11; // A = function(B)
		TABLE    = 12; // A = table(B)

		SUBTRACT = 13; // A = B - C
		DIVIDE   = 14; // A = B / C
		MULTIPLY = 15; // A = B * C
		POWER    = 16; // A = B ^ C
		MODULO   = 17; // A = B % C
		CONCAT   = 18; // A = B .. C
		INDEX    = 19; // A = B [ C ]
		OR       = 20; // A = B or C
		AND      = 21; // A = B and C

		LESSTHAN         = 22; // A = B < C
		LESSTHANEQUAL    = 23; // A = B <= C
		GREATERTHAN      = 24; // A = B > C
		GREATERTHANEQUAL = 25; // A = B >= C
		EQUALS           = 26; // A = B == C
		NOTEQUALS        = 27; // A = B ~= C

		
		MINUS  = 28;  // A = -B
		LENGTH = 29;  // A = #B

		ENVIRONMENT = 30; // A = _ENV

		SETINDEX    = 31; // A[B] = C

		ENVIRONMENTGET = 32; // A = _ENV[str(B)]
		ENVIRONMENTSET = 33; // _ENV[str(A)] = B

		JMP           = 34; // JMP(instruction(B))
		JMPIFTRUE     = 35; // if (A) { JMP(instruction(B)) }
		JMPIFFALSE    = 36; // if (!A) { JMP(instruction(B)) }
		JMPIFNIL      = 37; // if (A == nil) { JMP(instruction(B)) }

		CALLM    = 38; // A .. A+C-2 = A(A+1 .. A + B, returns...)
		VARARG   = 39; // A .. A+C = ...

		FORCHECK = 40; // if (!((A + 2) > 0 ? (A) <= (A + 1) : (A + 2) <= 0 && (A) >= (A + 1)) { JMP(instruction(B)) }
	}

	opcode op = 1;
	optional uint32 a = 2;
	optional uint32 b = 3;
	optional uint32 c = 4;

	optional debugdata debug = 5;
}

message tablevalue {
	enum valuetype {
		NIL = 0;
		NUMBER = 1;
		STRING = 2;
		TABLE = 3;
		FUNCTION = 4;
	}
	valuetype type = 1;
	optional uint32 index = 2;
}

message tablekeyvalue {
	tablevalue key = 1;
	tablevalue value = 2;
}

message table {
	repeated tablevalue arraypart = 1;
	repeated tablevalue keyvaluepart = 2;
}

message upvaluereference {
	uint32 protoup = 1;
	uint32 stackindex = 2;
}

message prototype {
	repeated instruction instructions = 1;
	repeated double numbers = 2;
	repeated string strings = 3;
	repeated table tables = 4;
	repeated prototype protos = 5;
	repeated upvaluereference upvalue = 7;

	uint32 stacksize = 8;

	optional string identifier = 6;
}